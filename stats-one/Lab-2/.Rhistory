print('cat')
exit
q()
# Basic mathematical operations
3 + 4
5 * 5
12 / 3
5^5
# Create a vector
v=c(1,3,5,7)
v
# List
## (Vector with different class of objects)
l=c("Blue", 2, 5, "Red")
l
# Create a matrix from a vector
m2=matrix(1:6)
# Then add dimensionality
dim(m2)=c(2,3)
m2
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
# Check the attributes
attributes(m)
# Create a matrix
m=matrix(1:6,2,3)
m
## Matrix creation is column-wise
# Create a matrix from a vector
m2=matrix(1:6)
# Then add dimensionality
dim(m2)=c(2,3)
m2
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
# Check the attributes
attributes(m)
# Call a particular cell in a matrix
m
m[1,2]
# Dataframes
## Different than matrices => can store different classes of objects
## Usually called with read.table()
# Create a dataframe
d=data.frame(subjectID=1:5,gender=c("M","F","F","M","F"),score=c(8,3,6,5,5))
d
# Number of rows
nrow(d)
# Number of columns
ncol(d)
# Check the attributes
attributes(d)
# Call a particular cell in a dataframe
d[2,1]
d[1,2]
# Display dataframe
View(d)
# Edit dataframe
edit(d)
# Download and install packages
install.packages("psych") ## Need to specify CRAN the 1st time
# Load package
library(psych)
search()
# Getting help on a function
?dataframe
# Getting help on a function
?data.frame
numbers = c(1:10)
words = c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw = data.frame(numbers, words)
nw
attributes(nw)
nw[1, 8]
nw[8, 1]
nw[8,2]
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
x=1:6
y=5:10
##cbind(x,y) # by column
rbind(x,y) # by row
m=matrix(1:6,2,3)
m
## Matrix creation is column-wise
m=matrix(1:10,2,5)
m
m=matrix(1:6,5)
m=matrix(1:6,1,5)
m=matrix(1:10,2,10)
m
m=matrix(1:10,2,5)
m
a=matrix(1:10,2,5)
a
x=1:6
y=5:10
##cbind(x,y) # by column
rbind(x,y) # by row
x=1:6
y=5:10
rbind(x,y) # by row
x=1:6
> y=5:10rbind(x,y) # by row
x=1:6
> y=5:10
> cbind(x,y) # by row
x=1:6
y=5:10
##cbind(x,y) # by column
cbind(x,y) # by row
type(4)
class(4)
x <- c(4, 'cat')
class(x)
x<- c(TRUE, 4)
class(x)
x <- 1:4
y <- 2:3
x + y
x <- c(1:10)
x[>2]
x > 2
print x > 2
print(x > 5)
q()
wd()
getwd()
load.packages(psych)
library(psych)
library(sm)
install.packages("sm")
library(sm)
getwd()
setwd("Home/Education/stats-one/Lab-2")
exit()
list.dirs("Home/Education/stats-one/Lab-2")
list.dirs("Home/Education/stats-one/")
list.dirs("Home/Education/stats-one")
list.dirs("Education/stats-one")
setwd("Education/stats-one/Lab-2")
# If necessary, set your working directory
setwd("Education/stats-one/Lab-2")
# If necessary, install packages
# install.packages("psych")
# install.packages("sm")
# Load packages
library(psych)
library(sm)
# Read data into a dataframe called impact
impact <- read.table("stats1-datafiles-Stats1.13.Lab.02.txt", header = T)
# Read data into a dataframe called impact
impact <- read.table("stats1_datafiles_Stats1.13.Lab.02.txt", header = T)
# Get the dimensions of the dataframe
dim(impact)
nrow(impact)
ncol(impact)
edit(impact)
# Object types
class(impact)
names(impact)
class(impact$verbal_memory_baseline)
class(impact$reaction_time_baseline)
class(impact$subject)
impact$subject <- factor(impact$subject)
class(impact$subject)
# Summary statistics
mean(impact$verbal_memory_baseline)
sd(impact$verbal_memory_baseline)
describe(impact)
describeBy(impact, impact$condition)
# Subsetting
edit(impact)
control <- subset(impact, impact[, 2]=="control")
control
concussed <- subset(impact, impact[, 2]=="concussed")
concussed
# Histograms of control group at baseline
par(mfrow = c(2,3)) # To view 6 histograms on one page
hist(control[, 3], xlab = "Verbal memory", main = "")
# Histograms of control group at baseline
par(mfrow = c(2,3)) # To view 6 histograms on one page
hist(control[, 3], xlab = "Verbal memory", main = "")
hist(control[, 4], xlab = "Visual memory")
hist(control[, 5], xlab = "Visual motor speed")
hist(control[, 6], xlab = "Reaction time")
hist(control[, 7], xlab = "Impulse control")
hist(control[, 8], xlab = "Total symptom score")
# To demonstrate that there is more than one way to access a variable
par(mfrow = c(1,2)) # To view 2 histograms on one page
hist(control[, 3], xlab = "Verbal memory", main = "")
hist(control$verbal_memory_baseline, xlab = "Verbal memory", main = "")
# Histograms of concussed group at baseline
par(mfrow = c(2,3))
hist(concussed[, 3], xlab = "Verbal memory", main = "")
hist(concussed[, 4], xlab = "Visual memory", main = "")
hist(concussed[, 5], xlab = "Visual motor speed", main = "")
hist(concussed[, 6], xlab = "Reaction time", main = "")
hist(concussed[, 7], xlab = "Impulse control", main = "")
hist(concussed[, 8], xlab = "Total symptom score", main = "")
# Histograms of control group at retest
par(mfrow = c(2,3))
hist(control[, 9], xlab = "Verbal memory", main = "")
hist(control[, 10], xlab = "Visual memory", main = "")
hist(control[, 11], xlab = "Visual motor speed", main = "")
hist(control[, 12], xlab = "Reaction time", main = "")
hist(control[, 13], xlab = "Impulse control", main = "")
hist(control[, 14], xlab = "Total symptom score", main = "")
# Histograms of concussed group at retest
par(mfrow = c(2,3))
hist(concussed[, 9], xlab = "Verbal memory", main = "")
hist(concussed[, 10], xlab = "Visual memory", main = "")
hist(concussed[, 11], xlab = "Visual motor speed", main = "")
hist(concussed[, 12], xlab = "Reaction time", main = "")
hist(concussed[, 13], xlab = "Impulse control", main = "")
hist(concussed[, 14], xlab = "Total symptom score", main = "")
# Density plots
par(mfrow = c(1,2))
hist(concussed[, 14], xlab = "Total symptom score", main = "")
plot(density(concussed[, 14]), xlab = "Total sympton score", main = "")
# Compare density plots
par(mfrow = c(1,1))
sm.density.compare(impact$total_symptom_retest,
impact$condition, xlab = "Total symptom score")
hw <- read.table("Stats1.13.HW.02.txt")
dim(hw)
edit(hw)
hw <- read.table("Stats1.13.HW.02.txt", header = T)
names(hw)
mean(hw$SR)
aSR <- hw$SR
var(aSR)
pretest <- subset(hw, hw[,3]=="pre")
edit pretest
pretest
posttest <- subset(hw, hw[,3]=="post")
posttest
mean(pretest$SR)
mean(posttest$SR)
median(posttest$SR)
max(posttest$SR)
describeBy(posttest, posttest$SR)
WM <- subset(hw, hw[,2]=="WM")
PE <- subset(hw, hw[,2]=="PE")
DS <- subset(hw, hw[,2]=="DS")
ds
DS
hist(DS)
hist(DS[ , 3], xlab = "um", main = "")
hist(control[, 9], xlab = "Verbal memory", main = "")
par(mfrow = c(1,2))
hist(DS[, 3])
hist(DS[, 4])
par(mfrow = c(2,3))
WMp <- subset(hw, hw[,2]=="WM", hw[, 3]=="pre")
WMt <- subset(hw, hw[,2]=="WM", hw[, 3]=="post")
WMp <- subset(hw, hw[,2]=="WM", hw[, 3]=="pre")
WMp <- subset(hw, hw[,2]=="WM" & hw[, 3]=="pre")
WMt <- subset(hw, hw[,2]=="WM" & hw[, 3]=="post")
PEp <- subset(hw, hw[,2]=="PE" & hw[, 3]=="pre")
PEt <- subset(hw, hw[,2]=="PE" & hw[, 3]=="post")
DSp <- subset(hw, hw[,2]=="DS" & hw[, 3]=="pre")
DSt <- subset(hw, hw[,2]=="DS" & hw[, 3]=="post")
par(mfrow = c(2,3))
hist(DSp[, 4])
hist(DSt[, 4])
hist(WMp[, 4])
hist(WMt[, 4])
hist(PEp[, 4])
hist(PEt[, 4])
post = subset(hw, hw$time=="post") THEN sd(post$SR)
describeBy(post, post$condition)
describeBy(posttest, posttest$SR)
sd(posttest$SR)
hw <- read.table("Stats1.13.HW.02.txt", header = T)
names(hw)
dim(hw)
mean(hw$SR)
aSR <- hw$SR
var(aSR)
pretest <- subset(hw, hw[,3]=="pre")
pretest
posttest <- subset(hw, hw[,3]=="post")
posttest
mean(pretest$SR)
mean(posttest$SR)
median(posttest$SR)
max(posttest$SR)
sd(posttest$SR)
describeBy(posttest, posttest$SR)
