print('cat')
exit
q()
# Basic mathematical operations
3 + 4
5 * 5
12 / 3
5^5
# Create a vector
v=c(1,3,5,7)
v
# List
## (Vector with different class of objects)
l=c("Blue", 2, 5, "Red")
l
# Create a matrix from a vector
m2=matrix(1:6)
# Then add dimensionality
dim(m2)=c(2,3)
m2
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
# Check the attributes
attributes(m)
# Create a matrix
m=matrix(1:6,2,3)
m
## Matrix creation is column-wise
# Create a matrix from a vector
m2=matrix(1:6)
# Then add dimensionality
dim(m2)=c(2,3)
m2
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
# Check the attributes
attributes(m)
# Call a particular cell in a matrix
m
m[1,2]
# Dataframes
## Different than matrices => can store different classes of objects
## Usually called with read.table()
# Create a dataframe
d=data.frame(subjectID=1:5,gender=c("M","F","F","M","F"),score=c(8,3,6,5,5))
d
# Number of rows
nrow(d)
# Number of columns
ncol(d)
# Check the attributes
attributes(d)
# Call a particular cell in a dataframe
d[2,1]
d[1,2]
# Display dataframe
View(d)
# Edit dataframe
edit(d)
# Download and install packages
install.packages("psych") ## Need to specify CRAN the 1st time
# Load package
library(psych)
search()
# Getting help on a function
?dataframe
# Getting help on a function
?data.frame
numbers = c(1:10)
words = c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw = data.frame(numbers, words)
nw
attributes(nw)
nw[1, 8]
nw[8, 1]
nw[8,2]
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
x=1:6
y=5:10
##cbind(x,y) # by column
rbind(x,y) # by row
m=matrix(1:6,2,3)
m
## Matrix creation is column-wise
m=matrix(1:10,2,5)
m
m=matrix(1:6,5)
m=matrix(1:6,1,5)
m=matrix(1:10,2,10)
m
m=matrix(1:10,2,5)
m
a=matrix(1:10,2,5)
a
x=1:6
y=5:10
##cbind(x,y) # by column
rbind(x,y) # by row
x=1:6
y=5:10
rbind(x,y) # by row
x=1:6
> y=5:10rbind(x,y) # by row
x=1:6
> y=5:10
> cbind(x,y) # by row
x=1:6
y=5:10
##cbind(x,y) # by column
cbind(x,y) # by row
type(4)
class(4)
x <- c(4, 'cat')
class(x)
x<- c(TRUE, 4)
class(x)
x <- 1:4
y <- 2:3
x + y
x <- c(1:10)
x[>2]
x > 2
print x > 2
print(x > 5)
q()
getmonitor.testscript()
getwd()
setwd("Education/data-analysis/week-two")
getmonitor.testscript()
complete.testscript()
local({
local({
local({
local({
checkSanity <- function() {
if(!file.exists("specdata"))
stop("directory 'specdata' not found; please change your working directory")
if(!file.exists("getmonitor.R"))
stop("file 'getmonitor.R' not found; this file is needed to run these tests; please change your working directory or name your code file accordingly")
if(!file.exists("complete.R"))
stop("file 'complete.R' not found; please change your working directory or name your code file accordingly")
source("getmonitor.R", local = TRUE)
if(!exists("getmonitor"))
stop("function 'getmonitor' cannot be found")
source("complete.R", local = TRUE)
if(!exists("complete"))
stop("function 'complete' cannot be found")
}
complete.testscript <- function() {
checkSanity()
outputfiles <- sprintf("complete-testoutput%d.txt", 1:3)
op <- options(); options(scipen = 4); on.exit(options(op))
source("getmonitor.R", local = TRUE)
source("complete.R", local = TRUE)
## Run all monitors
cc <- complete("specdata", 332:1)
stopifnot(all(names(cc) %in% c("id", "nobs")))
cc$id <- as.integer(cc$id)
cc <- cc[order(cc$id), ]
set.seed(248)
out <- as.numeric(head(cc[sample(332, 10), "nobs"]))
writeLines(as.character(out), outputfiles[1])
## Single monitor
cc <- complete("specdata", 24)
writeLines(as.character(as.numeric(cc$nobs)), outputfiles[2])
## Subset
set.seed(42)
cc <- complete("specdata", sample(332, 10))
cc$id <- as.integer(cc$id)
cc <- cc[order(cc$id), ]
out <- c(as.numeric(cc$id), as.numeric(cc$nobs))
writeLines(as.character(out), outputfiles[3])
cat("please upload the files\n\t", paste(outputfiles, collapse = "\n\t"), "\nto the Coursera web site\n", sep = "")
return(invisible())
}
assign("complete.testscript", complete.testscript, globalenv())
})
local({
checkSanity <- function() {
if(!file.exists("specdata"))
stop("directory 'specdata' not found; please change your working directory")
if(!file.exists("getmonitor.R"))
stop("file 'getmonitor.R' not found; this file is needed to run these tests; please change your working directory or name your code file accordingly")
if(!file.exists("complete.R"))
stop("file 'complete.R' not found; please change your working directory or name your code file accordingly")
source("getmonitor.R", local = TRUE)
if(!exists("getmonitor"))
stop("function 'getmonitor' cannot be found")
source("complete.R", local = TRUE)
if(!exists("complete"))
stop("function 'complete' cannot be found")
}
complete.testscript <- function() {
checkSanity()
outputfiles <- sprintf("complete-testoutput%d.txt", 1:3)
op <- options(); options(scipen = 4); on.exit(options(op))
source("getmonitor.R", local = TRUE)
source("complete.R", local = TRUE)
## Run all monitors
cc <- complete("specdata", 332:1)
stopifnot(all(names(cc) %in% c("id", "nobs")))
cc$id <- as.integer(cc$id)
cc <- cc[order(cc$id), ]
set.seed(248)
out <- as.numeric(head(cc[sample(332, 10), "nobs"]))
writeLines(as.character(out), outputfiles[1])
## Single monitor
cc <- complete("specdata", 24)
writeLines(as.character(as.numeric(cc$nobs)), outputfiles[2])
## Subset
set.seed(42)
cc <- complete("specdata", sample(332, 10))
cc$id <- as.integer(cc$id)
cc <- cc[order(cc$id), ]
out <- c(as.numeric(cc$id), as.numeric(cc$nobs))
writeLines(as.character(out), outputfiles[3])
cat("please upload the files\n\t", paste(outputfiles, collapse = "\n\t"), "\nto the Coursera web site\n", sep = "")
return(invisible())
}
assign("complete.testscript", complete.testscript, globalenv())
})
exit
