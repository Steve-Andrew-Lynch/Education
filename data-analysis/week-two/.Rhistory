if (id<100){
a_file <- paste(directory, '/0', id, ".csv", sep = "")
}
if(id<10){
a_file <- paste(directory, '/00', id, ".csv", sep = "")
} else {
a_file <- paste(directory, '/', id, ".csv", sep = "")
}
mydata <- read.csv(a_file)
if(summarize==TRUE) {
return(summary(mydata))
}
return(mydata)
}
data <- getmonitor(1, "specdata", TRUE)
head(data)
data <- getmonitor(101, "specdata", TRUE)
head(data)
data <- getmonitor(200, "specdata", TRUE)
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if (id<100){
a_file <- paste(directory, '/0', id, ".csv", sep = "")
}
if(id<10){
a_file <- paste(directory, '/00', id, ".csv", sep = "")
} else {
a_file <- paste(directory, '/', id, ".csv", sep = "")
}
mydata <- read.csv(a_file)
if(summarize==TRUE) {
return(summary(mydata))
}
return(mydata)
}
data <- getmonitor(1, "specdata", TRUE)
head(data)
data <- getmonitor(101, "specdata", TRUE)
head(data)
data <- getmonitor(200, "specdata", TRUE)
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if (id<100){
a_file <- paste(directory, '/0', id, ".csv", sep = "")
}
if(id<10){
a_file <- paste(directory, '/00', id, ".csv", sep = "")
} else {
a_file <- paste(directory, '/', id, ".csv", sep = "")
}
mydata <- read.table(a_file)
if(summarize==TRUE) {
return(summary(mydata))
}
return(mydata)
}
data <- getmonitor(1, "specdata", TRUE)
head(data)
data <- getmonitor(101, "specdata", TRUE)
head(data)
data <- getmonitor(200, "specdata", TRUE)
getmonitor <- function(id, directory, summarize = FALSE) {
## 'id' is a vector of length 1 indicating the monitor ID
## number. The user can specify 'id' as either an integer, a
## character, or a numeric.
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'summarize' is a logical indicating whether a summary of
## the data should be printed to the console; the default is
## FALSE
if (id<100){
a_file <- paste(directory, '/0', id, ".csv", sep = "")
}
if(id<10){
a_file <- paste(directory, '/00', id, ".csv", sep = "")
} else {
a_file <- paste(directory, '/', id, ".csv", sep = "")
}
mydata <- read.csv(a_file)
if(summarize==TRUE) {
print(summary(mydata))
}
return(mydata)
}
data <- getmonitor(1, "specdata", TRUE)
head(data)
data <- getmonitor(101, "specdata", TRUE)
head(data)
data <- getmonitor(200, "specdata", TRUE)
df<-NULL
for(e in 1:10) rbind(df,data.frame(x=e,square=e^2,even=factor(e%%2==0)))->df
print(df)
sum(complete.cases(getmonitor(i,directory)))
sum(complete.cases(getmonitor(1, "specdata")))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- sapply(id, function(i) sum(complete.cases(getmonitor(i,directory))))
id <- as.integer(id)
data.frame(id,nobs)
}
complete("specdata", 1)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
source("getmonitor.R")
## Step through our files and analyze them
for(i in id){
## Load file i
data<-getmonitor(i,directory)
## Analyze file i
compl<-complete.cases(data)
## Add the results from file i to our nobs vector
nobs<-c(nobs,sum(compl))
}
## All done, return our results in a data frame
return(data.frame(id,nobs))
}
complete("specdata", 1)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
source("getmonitor.R")
## Step through our files and analyze them
for(i in id){
## Load file i
data<-getmonitor(i,directory)
## Analyze file i
compl<-complete.cases(data)
## Add the results from file i to our nobs vector
nobs<-c(nobs,sum(compl))
}
## All done, return our results in a data frame
return(data.frame(id,nobs))
}
complete("specdata", 1)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
source("getmonitor.r")
## Step through our files and analyze them
for(i in id){
## Load file i
data<-getmonitor(i,directory)
## Analyze file i
compl<-complete.cases(data)
## Add the results from file i to our nobs vector
nobs<-c(nobs,sum(compl))
}
## All done, return our results in a data frame
return(data.frame(id,nobs))
}
complete("specdata", 1)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
source("getmonitor.R")
## Step through our files and analyze them
for(i in id){
## Load file i
data<-getmonitor(i,directory)
## Analyze file i
compl<-complete.cases(data)
## Add the results from file i to our nobs vector
nobs<-c(nobs,sum(compl))
}
## All done, return our results in a data frame
return(data.frame(id,nobs))
}
complete("specdata", 1)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
source("getmonitor.R")
my_func <-function(x) {
data <- getmonitor(x, "specdata")
return( sum(complete.cases(data)) )
}
nobs <- sapply(id, my_func)
df <- data.frame(id, nobs)
return(df)
}
complete("specdata", 1)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
source("getmonitor.R")
my_func <-function(x) {
data <- getmonitor(x, "specdata")
return( sum(complete.cases(data)) )
}
nobs <- sapply(id, my_func)
df <- data.frame(id, nobs)
return(df)
}
complete("specdata", 1)
complete("specdata", 2)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
source("getmonitor.R")
source("getmonitor.R")
nobs <- numeric()
for ( i in id ) {
data <- getmonitor(i, directory)
cc <- sum(complete.cases(data))
nobs <- c(nobs, cc)
}
return ( data.frame(id=id, nobs=nobs)  )
}
complete("specdata", 1)
complete("specdata", 2)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
source("getmonitor.R")
source("getmonitor.R")
nobs <- numeric()
for ( i in id ) {
data <- getmonitor(i, directory)
cc <- sum(complete.cases(data))
nobs <- c(nobs, cc)
}
return ( data.frame(id=id, nobs=nobs)  )
}
complete("specdata", 1)
complete("specdata", 2)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
source("getmonitor.R")
source("getmonitor.R")
nobs <- numeric()
for ( i in id ) {
data <- getmonitor(i, directory)
cc <- sum(complete.cases(data))
nobs <- c(nobs, cc)
}
return ( data.frame(id=id, nobs=nobs)  )
}
complete("specdata", 1)
complete("specdata", 2)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
source("getmonitor.R")
source("getmonitor.R")
nobs <- numeric()
for ( i in id ) {
data <- getmonitor(i, directory)
cc <- sum(complete.cases(data))
nobs <- c(nobs, cc)
}
return ( data.frame(id=id, nobs=nobs)  )
}
complete("specdata", 1)
complete("specdata", 2)
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
nobs <- numeric()
source("getmonitor.R")
source("getmonitor.R")
nobs <- numeric()
for ( i in id ) {
data <- getmonitor(i, directory)
cc <- sum(complete.cases(data))
nobs <- c(nobs, cc)
}
return ( data.frame(id=id, nobs=nobs)  )
}
complete("specdata", 1)
complete("specdata", 2)
complete("specdata", 30:25)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
source("getmonitor.R")
id <- 1:332
my_func <- function(x) {
v <- getmonitor(x, directory)
if ( sum(complete.cases(v) ) > threshold ) {
my_answer <- cor(v$sulfate, v$nitrate, "complete.obs")
return ( my_answer )
} else {
return ( NA )
}
}
# sapply extracts one item at a time from id
# and gives that item to my_func
# its sort of like an auotmatic loop
# then sapply returns a vector containing the cor values or NA
ret_val <- sapply(id, my_func)
# strip out the NAs
# but what happens if they are ALL NAs and we strip out everything ?
# that's ok, just return an empty numeric vector
return ( as.numeric( ret_val[!is.na(ret_val)] ) )
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
source("getmonitor.R")
id <- 1:332
my_func <- function(x) {
v <- getmonitor(x, directory)
if ( sum(complete.cases(v) ) > threshold ) {
my_answer <- cor(v$sulfate, v$nitrate, "complete.obs")
return ( my_answer )
} else {
return ( NA )
}
}
# sapply extracts one item at a time from id
# and gives that item to my_func
# its sort of like an auotmatic loop
# then sapply returns a vector containing the cor values or NA
ret_val <- sapply(id, my_func)
# strip out the NAs
# but what happens if they are ALL NAs and we strip out everything ?
# that's ok, just return an empty numeric vector
return ( as.numeric( ret_val[!is.na(ret_val)] ) )
}
cr
corr("specdata", 150)
head(cr)
summary(cr)
cr
corr("specdata", 400)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
source("getmonitor.R")
id <- 1:332
my_func <- function(x) {
v <- getmonitor(x, directory)
if ( sum(complete.cases(v) ) > threshold ) {
my_answer <- cor(v$sulfate, v$nitrate, "complete.obs")
return ( my_answer )
} else {
return ( NA )
}
}
# sapply extracts one item at a time from id
# and gives that item to my_func
# its sort of like an auotmatic loop
# then sapply returns a vector containing the cor values or NA
ret_val <- sapply(id, my_func)
# strip out the NAs
# but what happens if they are ALL NAs and we strip out everything ?
# that's ok, just return an empty numeric vector
return ( as.numeric( ret_val[!is.na(ret_val)] ) )
}
cr<-corr("specdata", 150)
head(cr)
summary(cr)
cr<-corr("specdata", 400)
head(cr)
