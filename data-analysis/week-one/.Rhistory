print('cat')
exit
q()
# Basic mathematical operations
3 + 4
5 * 5
12 / 3
5^5
# Create a vector
v=c(1,3,5,7)
v
# List
## (Vector with different class of objects)
l=c("Blue", 2, 5, "Red")
l
# Create a matrix from a vector
m2=matrix(1:6)
# Then add dimensionality
dim(m2)=c(2,3)
m2
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
# Check the attributes
attributes(m)
# Create a matrix
m=matrix(1:6,2,3)
m
## Matrix creation is column-wise
# Create a matrix from a vector
m2=matrix(1:6)
# Then add dimensionality
dim(m2)=c(2,3)
m2
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
# Check the attributes
attributes(m)
# Call a particular cell in a matrix
m
m[1,2]
# Dataframes
## Different than matrices => can store different classes of objects
## Usually called with read.table()
# Create a dataframe
d=data.frame(subjectID=1:5,gender=c("M","F","F","M","F"),score=c(8,3,6,5,5))
d
# Number of rows
nrow(d)
# Number of columns
ncol(d)
# Check the attributes
attributes(d)
# Call a particular cell in a dataframe
d[2,1]
d[1,2]
# Display dataframe
View(d)
# Edit dataframe
edit(d)
# Download and install packages
install.packages("psych") ## Need to specify CRAN the 1st time
# Load package
library(psych)
search()
# Getting help on a function
?dataframe
# Getting help on a function
?data.frame
numbers = c(1:10)
words = c("One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten")
nw = data.frame(numbers, words)
nw
attributes(nw)
nw[1, 8]
nw[8, 1]
nw[8,2]
# Create a matrix by binding columns or rows
x=1:6
y=5:10
cbind(x,y) # by column
rbind(x,y) # by row
x=1:6
y=5:10
##cbind(x,y) # by column
rbind(x,y) # by row
m=matrix(1:6,2,3)
m
## Matrix creation is column-wise
m=matrix(1:10,2,5)
m
m=matrix(1:6,5)
m=matrix(1:6,1,5)
m=matrix(1:10,2,10)
m
m=matrix(1:10,2,5)
m
a=matrix(1:10,2,5)
a
x=1:6
y=5:10
##cbind(x,y) # by column
rbind(x,y) # by row
x=1:6
y=5:10
rbind(x,y) # by row
x=1:6
> y=5:10rbind(x,y) # by row
x=1:6
> y=5:10
> cbind(x,y) # by row
x=1:6
y=5:10
##cbind(x,y) # by column
cbind(x,y) # by row
type(4)
class(4)
x <- c(4, 'cat')
class(x)
x<- c(TRUE, 4)
class(x)
x <- 1:4
y <- 2:3
x + y
x <- c(1:10)
x[>2]
x > 2
print x > 2
print(x > 5)
q()
setwd("./home/steve/Education")
setwd("./steve/home/Education")
list.dirs("./steve", recursive = FALSE)
list.dirs("./home", recursive = FALSE)
list.dirs()
list.dirs("/home", recursive = FALSE)
list.dirs("/home/steve", recursive = FALSE)
setwd("/home/steve/Education/data-analysis/week-two")
x <- matrix(rnorm(200), 20,10)
x
rowSums(x)
x = c(1,2,3,4)
x
x = (1:10)
x
y = (1:10, -1)
y = (10:20)
y = (11:20)
a = c(x, y)
a
a = (x, y)
a = list(x, y)
a
tapply(x, f, mean, simplify = TRUE)
tapply(x, mean, simplify = TRUE)
split(x, 2)
split(x, 1)
split(x, 5)
split(x, gl(1, 2))
split(x, gl(2, 2))
split(x, gl(1, 5))
mapply(mean, x)
x
mapply(mean, a)
split(a, gl(1, 5))
mapply(mean, a)
mean(x)
mean(y)
a = NULL
x = NULL
y = NULL
mapply(mean, x, y)
y <- (11:20)
x <- (1:10)
a = list(x, y)
mapply(mean, x, y)
mapply(mean, x, y, 2)
mapply(mean, a)
mapply(mean, 1:10, 11:20)
mapply(mean, 1:10, 100:200)
mapply(mean, 1:10, 21:30)
mapply(mean, 1:10, 101:200)
mapply(mean, a, x)
getwd()
setwd("cd..")
setwd("..")
getwd()
setwd("/week-one")
list.dirs("/home/steve/Education/data-analysis")
setwd("week-one")
read.table("hw1_data", headers = TRUE)
read.table("hw1_data", header = TRUE)
read.table("hw1_data.csv", header = TRUE)
read.csv("hw1_data.csv", header = TRUE)
x <- read.csv("hw1_data.csv", header = TRUE)
x
x[1:2]
x[2, ]
x[1:2, ]
x[-2, ]
x[-2:1, ]
x[152:153, ]
x$Ozone[47, ]
x$Ozone
x$Ozone[47]
sum("NA" %in% x$Ozone)
a <- x$Ozone[47]
a
a <- x$Ozone
a <- list(x$Ozone)
a
a <- x$Ozone
a <- x$Ozone
is.na(a)
sum(is.na(a))
b <- x$Ozone > 31 && x$Temp > 90
b
x$Ozone > 31
b <- x[ which(x$Ozone > 31 & x$Temp > 90)]
b <- x[ which(x$Ozone > 31 & x$Temp > 90, )]
b <- x[ which(x$Ozone > 31 & x$Temp > 90), ]
b
mean(b$Solar.R)
c <- x[ which(x$month == 6), ]
c
c <- x[ which(x$Month == 6), ]
c
mean(c$Temp)
d <- x[ which(x$Month == 5), ]
d
max(d$Ozone)
d <- x[ which(x$Month == 5), ]
na.omit(d)
max(d$Ozone)
min(d$Ozone)
min(d)
max(d)
d <-na.omit(d)
max(d$Ozone)
q()
